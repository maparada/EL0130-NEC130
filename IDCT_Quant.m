function struct_Qinv = IDCT_Quant (struct_Q,S)struct_Qinv(length(struct_Q)) = struct('y',[],'cb',[],'cr',[]);V = size(struct_Q(1).y,1);% mede a quantidade de linhas de XH = size(struct_Q(1).y,2);% mede a quantidade de colunas de XV2 = size(struct_Q(1).cb,1);% mede a quantidade de linhas de XH2 = size(struct_Q(1).cb,2);% mede a quantidade de colunas de XQ=[16	11	10	16	24	40	51	61;   12	12	14	19	26	58	60	55;   14	13	16	24	40	57	69	56;   14	17	22	29	51	87	80	62;   18	22	37	56	68	109	103	77;   24	35	55	64	81	104	113	92;   49	64	78	87	103	121	120	101;   72	92	95	98	112	100	103	99];%matriz de quantização para canais de luminância.QLumi=repmat(Q,V/8,H/8);Q2 =[17 18 24 47 99 99 99 99;    18 21 26 66 99 99 99 99;    24 26 56 99 99 99 99 99;    47 66 99 99 99 99 99 99;    99 99 99 99 99 99 99 99;    99 99 99 99 99 99 99 99;    99 99 99 99 99 99 99 99;    99 99 99 99 99 99 99 99;];%matriz de quantização para canais de crominância.QCromi=repmat(Q2,V2/8,H2/8);for i=1:length(struct_Q)y_q = struct_Q(i).y;cb_q = struct_Q(i).cb;cr_q = struct_Q(i).cr;ZQ=y_q.*(QLumi*S);ZQ2=cb_q.*(QCromi*S);ZQ3=cr_q.*(QCromi*S);%realiza a transformada inversaZQa=reshape(ZQ,8,[]);ZQa_dct=idct(ZQa);Y_rec=reshape(ZQa_dct,V,[]);ZQa=reshape(Y_rec',8,[]);ZQa_dct=idct(ZQa);Y_rec=reshape(ZQa_dct,H,[])';ZQ2a=reshape(ZQ2,8,[]);ZQ2a_dct=idct(ZQ2a);cb_rec=reshape(ZQ2a_dct,V2,[]);ZQa2=reshape(cb_rec',8,[]);ZQ2a_dct=idct(ZQa2);cb_rec=reshape(ZQ2a_dct,H2,[])';ZQ3a=reshape(ZQ3,8,[]);ZQ3a_dct=idct(ZQ3a);cr_rec=reshape(ZQ3a_dct,V2,[]);ZQa3=reshape(cr_rec',8,[]);ZQ3a_dct=idct(ZQa3);cr_rec=reshape(ZQ3a_dct,H2,[])';% converte a imagem resultante para R, G, B% B2 = (cb_rec-128)/0.564 + Y_rec;% R2 = (cr_rec-128)/0.713 + Y_rec;% G2 = (Y_rec -0.114*B2 - 0.299*R2)/0.587;%re3monta a imagem R, G, B% im_final(:,:,1) = R2;% im_final(:,:,2) = G2;% im_final(:,:,3) = B2;struct_Qinv(i).y = Y_rec;struct_Qinv(i).cb = cb_rec;struct_Qinv(i).cr = cr_rec;endend